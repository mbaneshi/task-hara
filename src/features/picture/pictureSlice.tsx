import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchPictures } from "./pictureAPI";

export interface PicturesState {
  items: string[];
  err: string | null;
  islodings: boolean;
}

const initialState: PicturesState = {
  items: [],
  err: null,
  islodings: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchPicAsync = createAsyncThunk(
  "picture/fetchPictures",
  async (url: string) => {
    const response = await fetchPictures(url);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const picturesrSlice = createSlice({
  name: "picture",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getPic: (state, action) => {
      state.items.push(action.payload);
    },
    setErr: (state, action) => {
      state.err = action.payload;
    },
    setIsloading: (state, action) => {
      state.islodings = action.payload;
    },
  },
  //     increment: (state) => {
  //       // Redux Toolkit allows us to write "mutating" logic in reducers. It
  //       // doesn't actually mutate the state because it uses the Immer library,
  //       // which detects changes to a "draft state" and produces a brand new
  //       // immutable state based off those changes
  //       state.value += 1;
  //     },
  //     decrement: (state) => {
  //       state.value -= 1;
  //     },
  //     // Use the PayloadAction type to declare the contents of `action.payload`
  //     incrementByAmount: (state, action: PayloadAction<number>) => {
  //       state.value += action.payload;
  //     },
  //   },
  //   // The `extraReducers` field lets the slice handle actions defined elsewhere,
  //   // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPicAsync.pending, (state) => {
        state.islodings = true;
      })
      .addCase(fetchPicAsync.fulfilled, (state, action) => {
        state.islodings = false;
        state.items = action.payload;
      })
      .addCase(fetchPicAsync.rejected, (state, action) => {
        state.islodings = false;
        state.err = action.payload as string;
      });
  },
});

export const { getPic, setErr, setIsloading } = picturesrSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPicture = (state: RootState) => state.picture.items;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default picturesrSlice.reducer;
